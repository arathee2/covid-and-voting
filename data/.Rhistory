table(data$building_type)
table(data$property_state)
# read CSVs
columns <- c('district', 'fin_sub', 'chargeable_fin_number', 'po_name',
'unit_name', 'property_address', 'county', 'city', 'state', 'zip',
'property_state', 'ownership', 'fdb_id', 'ams_locale',
'fdb_facility_type', 'fdb_facility_subtype',
'building_ownership_description', 'land+description',
'space_certified_indicator', 'building_occurrence_date',
'area_sq_ft')
data_directory <- '/Users/amandeeprathee/work/corona-visualization/v2/data/'
csv_names <- list.files(data_directory)
setwd(data_directory)
data <- read_csv("ak.csv", col_names=columns, skip=4)
for (csv_file in csv_names[2:length(csv_names)]) {
new_data <- read_csv(csv_file, col_names=columns, skip=4)
data <- rbind(data, new_data)
}
data$county <- str_to_title(data$county); head(data$county)
state_county <- data %>% select(state, county) %>% unite(state_county, sep=", ")
data$state_county <- state_county$state_county
# manually expand county names for counties with three or more words
temp <- str_replace(data$county, 'Fairbanks N Star', 'Fairbanks North Star')
temp <- str_replace(data$county, 'Prince Of Wales-Outer Ketchikan', 'Prince Of Wales-Outer Ketchikan')
temp <- str_replace(data$county, 'Dist Of Columbia', 'District of Columbia')
temp <- str_replace(data$county, 'St. Louis City', 'St. Louis city')
temp <- str_replace(data$county, 'Lake Of The Woods', 'Lake of the Woods')
temp <- str_replace(data$county, 'Isle Of Wight ', 'Isle of Wight ')
temp <- str_replace(data$county, 'Lewis And Clark', 'Lewis and Clark')
temp <- str_replace(data$county, 'Fond Du Lac', 'Fond du Lac')
temp <- str_replace(data$county, 'And', 'and')
temp <- str_replace(data$county, 'Of', 'of')
temp <- str_replace(data$county, 'The', 'the')
data$county <- temp
data$building_type <- ifelse(str_detect(data$unit_name, '.*MAIN OFFICE.*'), "post_office", "not_post_office")
table(data$building_type)
str(data)
data <- data[data$building_type == 'post_office', ]
str(data)
num_post_offices <- data %>% select(county, state) %>% summarise(num_post_offices = n())
str(num_post_offices)
num_post_offices <- data %>% select(state_county) %>% summarise(num_post_offices = n())
str(num_post_offices)
num_post_offices <- data %>% select(state_county) %>% group_by(state_county) %>% summarise(num_post_offices = n())
str(num_post_offices)
get_fips <- function(state_counties, progress=TRUE){
fips <- c()
index <- c()
for (i in 1:length(state_counties)) {
if(progress==TRUE){
cat('\014')
cat(paste0(round(i / (length(state_counties)) * 100, 4), '% completed\n'))
}
index <- c(index, i)
fip_code <- tryCatch(
{
fipscounty(county = state_counties[i])
},
error=function(cond) {
return(NA)
}
)
fips <- c(fips, fip_code)
}
return(list(fips, index))
}
fips <- get_fips(num_post_offices$state_county)
table(is.na(fips))
tail(fips)
data$fips <- fips
table(is.na(fips))
fips <- as.integer(fips)
table(is.na(fips[[1]]))
data$fips <- fips[[1]]
str(data)
str(num_post_offices)
str(fips)
num_post_offices$fips <- fips[[1]]
num_post_offices
project_directory <- '/Users/amandeeprathee/work/corona-visualization/v2/'
setwd(project_directory)
save(num_post_offices, file = "post_offices.Rda")
table(is.na(num_post_offices$fips))
num_post_offices <- num_post_offices[!is.na(num_post_offices$fips), ]
str(num_post_offices)
# plot count and counties
plot_usmap(data=num_post_offices, regions = "state_county", values = num_post_offices) +
labs(title = "US Counties",
subtitle = "This is a blank map of the counties of the United States.") +
theme(panel.background = element_rect(color = "black", fill = "lightblue"))
?plot_usmap
fipscounty(county = "OR, Multnomah")
data(state.fips)
install.packages('maps')
library(maps)
data(state.fips)
state.fips
county.fips
str_extract("MN, hello", "..")
# extract states
states <- str_extract(num_post_offices, "..")
# extract states
states <- sapply(num_post_offices, function(x){str_extract(x, "..")})
states
# extract states
states <- sapply(num_post_offices$state_county, function(x){str_extract(x, "..")})
states
num_post_offices$states <- states
str(num_post_offices)
state.fips
head(num_post_offices)
num_post_offices$abb <- states
num_post_offices
str(state.fips)
merge(num_post_offices, state.fips, by="abb")
state.fips
merge(num_post_offices, state.fips, by="abb")
merged <- merge(num_post_offices, state.fips, by="abb")
str(merged)
merged$fips.y <- as.character(merged$fips.y)
str(merged)
str_pad("hadley", 30, "left")
str_pad("hadley", 30, "left", pad='0')
str_pad('1', 2, "left", pad='0')
str_pad('21', 2, "left", pad='0')
merged$fips.y <- sapply(merged$fips.y, function(x){str_pad(x, 2, "left", pad='0')})
str(merged)
head(merged, 10)
head(merged, 50)
tail(merged, 50)
str(merged)
?unite
merged$fips <- merged %>% select(fips.x, fips.y) %>% unite(fips, sep='')
str(merged)
merged$fips <- (merged %>% select(fips.x, fips.y) %>% unite(fips, sep=''))$fips
str(merged)
?us_map
plot_usmap()
?plot_usmap
str(merged)
# plot count and counties
plot_usmap(data=merged, regions = "counties", values = num_post_offices) +
labs(title = "US Counties",
subtitle = "This is a blank map of the counties of the United States.") +
theme(panel.background = element_rect(color = "black", fill = "lightblue"))
# plot count and counties
plot_usmap(data=merged[, c('fips', 'num_post_offices')], regions = "counties", values = num_post_offices) +
labs(title = "US Counties",
subtitle = "This is a blank map of the counties of the United States.") +
theme(panel.background = element_rect(color = "black", fill = "lightblue"))
merged[, c('fips', 'num_post_offices')]
merged[, c('fips', 'num_post_offices')]
# plot count and counties
plot_usmap(data=merged[, c('fips', 'num_post_offices')], regions = "counties", values = num_post_offices) +
labs(title = "US Counties",
subtitle = "This is a blank map of the counties of the United States.") +
theme(panel.background = element_rect(color = "black", fill = "lightblue"))
# plot count and counties
exclude <- c("AK, Aleutians East", "AK, Aleutians West", "AK, Anchorage", "AK, Bethel", "AK, Bristol Bay", "AK, Denali", "AK, Dillingham", "AK, Haines", "AK, Juneau", "AK, Kenai Peninsula", "AK, Kodiak Island", "AK, Nome", "AK, North Slope", "AK, Northwest Arctic", "AK, Sitka", "AK, Valdez-Cordova", "AK, Wade Hampton", "AK, Wrangell-Petersburg", "AK, Yukon-Koyukuk", "AL, Autauga", "AL, Baldwin", "AL, Barbour", "AL, Blount", "AL, Bullock", "AL, Butler", "AL, Calhoun", "AL, Chambers", "AL, Chilton", "AL, Clarke",
"AL, Coffee", "AL, Colbert", "AL, Conecuh", "AL, Coosa", "AL, Covington", "AL, Crenshaw", "AL, Cullman", "AL, Dale", "AL, Dallas", "AL, De Kalb", "AL, Elmore", "AL, Escambia", "AL, Etowah", "AL, Fayette", "AL, Franklin", "AL, Greene", "AL, Hale", "AL, Jackson", "AL, Jefferson", "AL, Lauderdale", "AL, Lee", "AL, Limestone", "AL, Madison", "AL, Marengo", "AL, Marion", "AL, Marshall", "AL, Mobile", "AL, Monroe", "AL, Morgan", "AL, Perry", "AL, Pickens", "AL, Pike", "AL, Russell")
plot_usmap(data=merged[, c('fips', 'num_post_offices')],
regions = "counties",
values = num_post_offices,
exclude= exclude) +
labs(title = "US Counties",
subtitle = "This is a blank map of the counties of the United States.") +
theme(panel.background = element_rect(color = "black", fill = "lightblue"))
merged$fips <- as.integer(merged$fips)
str(merged)
merged$values <- merged$num_post_offices
str(merged)
sub <- merged[, c('fips', 'values')]
str(sub)
plot_usmap(data=sub,
regions = "counties",
values = "values",
exclude= exclude) +
labs(title = "US Counties",
subtitle = "This is a blank map of the counties of the United States.") +
theme(panel.background = element_rect(color = "black", fill = "lightblue"))
sub
sub
merged <- merge(num_post_offices, state.fips, by="abb")
merged$fips.y <- as.character(merged$fips.y)
merged$fips.y <- sapply(merged$fips.y, function(x){str_pad(x, 2, "left", pad='0')})
merged$fips <- (merged %>% select(fips.x, fips.y) %>% unite(fips, sep=''))$fips
merged$values <- merged$num_post_offices
sub <- merged[, c('fips', 'values')]
str(sub)
plot_usmap(data=sub,
regions = "counties",
values = "values",
exclude= exclude) +
labs(title = "US Counties",
subtitle = "This is a blank map of the counties of the United States.") +
theme(panel.background = element_rect(color = "black", fill = "lightblue"))
plot_usmap(data=sub,
regions = "counties",
values = "values") +
labs(title = "US Counties",
subtitle = "This is a blank map of the counties of the United States.") +
theme(panel.background = element_rect(color = "black", fill = "lightblue"))
str(sub)
plot_usmap(data=sub,
regions = "counties",
values = "values") +
labs(title = "US Counties",
subtitle = "This is a blank map of the counties of the United States.") +
theme(panel.background = element_rect(color = "black", fill = "lightblue"))
warnings()
county.fips
sub <- county.fips
sub$values <- rep(1:nrow(sub))
str(sub)
sub <- county.fips$fips
sub$values <- rep(1:nrow(sub))
str(sub)
sub <- county.fips
sub$values <- rep(1:nrow(sub))
str(sub)
plot_usmap(data=sub[, c('fips', 'values')],
regions = "counties",
values = "values") +
labs(title = "US Counties",
subtitle = "This is a blank map of the counties of the United States.") +
theme(panel.background = element_rect(color = "black", fill = "lightblue"))
str(sub)
statepop
plot_usmap(data = statepop, values = "pop_2015", color = "red") +
scale_fill_continuous(name = "Population (2015)", label = scales::comma) +
theme(legend.position = "right")
merged
str(merged)
str(statepop)
plot_usmap(data = statepop[, c('fips', 'pop_2015')], values = "pop_2015", color = "red") +
scale_fill_continuous(name = "Population (2015)", label = scales::comma) +
theme(legend.position = "right")
plot_usmap(data = statepop[, c('abbr', 'pop_2015')], values = "pop_2015", color = "red") +
scale_fill_continuous(name = "Population (2015)", label = scales::comma) +
theme(legend.position = "right")
plot_usmap(data = statepop[, c('fips', 'pop_2015')], values = "pop_2015", color = "red") +
scale_fill_continuous(name = "Population (2015)", label = scales::comma) +
theme(legend.position = "right")
merged <- merge(num_post_offices, state.fips, by="abb")
merged$fips.y <- as.character(merged$fips.y)
merged$fips.y <- sapply(merged$fips.y, function(x){str_pad(x, 2, "left", pad='0')})
merged$fips <- (merged %>% select(fips.x, fips.y) %>% unite(fips, sep=''))$fips
merged$fips <- as.integer(merged$fips)
merged$values <- merged$num_post_offices
str(merged)
sub <- merged[, c('fips', 'values')]
str(sub)
nrow(sub)
sum(sub$fips %in% county.fips$fips)
sub$fips %in% county.fips$fips
sub$fips
county.fips$fips
str(merged)
county.fips
str
str(merged)
nrow(merged)
sum(merged$fips.x %in% county.fips$fips)
merged$fips.x %in% county.fips$fips
length(merged$fips.x %in% county.fips$fips)
merged$fips.x !%in% county.fips$fips
merged[!merged$fips.x %in% county.fips$fips, ]
merged[!merged$fips.x %in% county.fips$fips, c('fips.x')]
merged$fips.x %in% county.fips$fips
sum(county.fips$fips %in% merged$fips.x)
merged[!county.fips$fips %in% merged$fips.x, c('fips.x')]
county.fips$fips %in% merged$fips.x
county.fips[county.fips$fips %in% merged$fips.x]
county.fips[county.fips$fips %in% merged$fips.x]$fips
county.fips[county.fips$fips %in% merged$fips.x, c('fips')]
county.fips[!county.fips$fips %in% merged$fips.x, c('fips')]
nrow(county.fips[!county.fips$fips %in% merged$fips.x, c('fips')])
nrow(county.fips[!county.fips$fips %in% merged$fips.x, c('fips')])
length(county.fips[!county.fips$fips %in% merged$fips.x, c('fips')])
county.fips[!county.fips$fips %in% merged$fips.x, c('fips')]
library(maps)
m <- map("county", "Florida")
str(m)
m <- map("county", "Florida", fill = 1:68)
install.packages(c('sp', 'maptolls', 'plyr'))
library(sp)
library(maptools)
library(ggplot2)
library(plyr)
library(ggplot2)
#read in the florida county shapefile
fl <- readShapePoly("fl.shp", repair=TRUE, IDvar="NAME")
install.packages('sf')
sf
library(sf)
shp <- readRDS(gzcon(url("https://github.com/mgimond/ES218/blob/gh-pages/Data/maine_tracts.Rds?raw=true")))
dat <- read.csv("http://mgimond.github.io/ES218/Data/maine_commute.csv")
shp2 <- left_join(shp, dat, by = "Geo_FIPS")
ggplot(shp2) + geom_sf(aes(fill = Commute))
str(dat)
str(shp2)
plot_usmap(regions = "counties") +
labs(title = "US Counties",
subtitle = "This is a blank map of the counties of the United States.") +
theme(panel.background = element_rect(color = "black", fill = "lightblue"))
plot_usmap(regions = "counties")
str(sub)
plot_usmap(data=sub, regions = "counties")
plot_usmap(data=countypop, regions = "counties", values = 'pop_2015')
countypop$fips
str(countypop$fips)
str(merged)
?merge
sub <- merged[, c('fips.x', 'values')]
str(sub)
str(countypop)
str(sub)
names(sub) <- c('fips', 'values')
str(sub)
str(countypop)
str(sub)
merged2 <- merge(sub, countypop, by='fips')
str(merged2)
summary(merged2)
plot_usmap(data=countypop, regions = "counties", values = 'values')
plot_usmap(data=merged2, regions = "counties", values = 'values')
str(merged2)
str(countypop)
merged2 <- left_join(countypop, sub, by='fips')
str(merged2)
str(countypop)
str(countypop)
merged2 <- left_join(countypop, sub, by='fips')
str(sub)
merged2 <- left_join(countypop, sub, by='fips')
str(merged2)
plot_usmap(data=merged2, regions = "counties", values = 'values')
str(countypop)
str(sub)
left_join(countypop, sub, by='fips')
str(countypop)
str(sub)
merged2 <- inner_join(countypop, sub, by='fips')
str(merged2)
str(countypop)
str(sub)
merged2 <- right_join(countypop, sub, by='fips')
str(merged2)
str(sub)
str(countypop)
str(sub)
merged2 <- left_join(countypop, sub, by='fips')
str(merged2)
merged2 <- semi_join(countypop, sub, by='fips')
str(merged2)
merged2 <- anti_join(countypop, sub, by='fips')
str(merged2)
merged2 <- merge(countypop, sub, by='fips', all.x = TRUE, all.y = FALSE)
str(merged2)
sub %>% group_by(fips.y) %>% summarise(count = n()) %>% arrange(desc()) %>% top_n(10)
sub
sub %>% group_by(fips) %>% summarise(count = n()) %>% arrange(desc()) %>% top_n(10)
sub %>% group_by(fips) %>% summarise(count = n()) %>% arrange(desc()) %>% top_n(10)
str(sub)
sub %>% select(fips) %>% group_by(fips) %>% summarise(count = n()) %>% arrange(desc()) %>% top_n(10)
rlang::last_error()
sub %>% select(fips, values) %>% group_by(fips) %>% summarise(count = n()) %>% arrange(desc()) %>% top_n(10)
sub %>% select(fips, values) %>% group_by(fips) %>% summarise(count = mean(values)) %>% arrange(desc()) %>% top_n(10)
sub %>% select(fips, values) %>% group_by(fips) %>% summarise(count = mean(values)) %>% arrange(desc(count)) %>% top_n(10)
sub %>% select(fips, values) %>% group_by(fips) %>% summarise(count = n()) %>% arrange(desc(count)) %>% top_n(10)
install.packages(c("choroplethr", "choroplethrMaps"))
library(choroplethr)
library(choroplethrMaps)
head(df_pop_county)
data(df_pop_county)
head(df_pop_county)
str(df_pop_county)
library(tidyverse)
library(usmap)
library(ggplot2)
library(rerddap)
library(maps)
# read CSVs
columns <- c('district', 'fin_sub', 'chargeable_fin_number', 'po_name',
'unit_name', 'property_address', 'county', 'city', 'state', 'zip',
'property_state', 'ownership', 'fdb_id', 'ams_locale',
'fdb_facility_type', 'fdb_facility_subtype',
'building_ownership_description', 'land+description',
'space_certified_indicator', 'building_occurrence_date',
'area_sq_ft')
data_directory <- '/Users/amandeeprathee/work/corona-visualization/v2/data/'
csv_names <- list.files(data_directory)
setwd(data_directory)
data <- read_csv("ak.csv", col_names=columns, skip=4)
for (csv_file in csv_names[2:length(csv_names)]) {
new_data <- read_csv(csv_file, col_names=columns, skip=4)
data <- rbind(data, new_data)
}
str(data)
data$county <- str_to_title(data$county); head(data$county)
state_county <- data %>% select(state, county) %>% unite(state_county, sep=", ")
data$state_county <- state_county$state_county
# manually expand county names for counties with three or more words
temp <- str_replace(data$county, 'Fairbanks N Star', 'Fairbanks North Star')
temp <- str_replace(data$county, 'Prince Of Wales-Outer Ketchikan', 'Prince Of Wales-Outer Ketchikan')
temp <- str_replace(data$county, 'Dist Of Columbia', 'District of Columbia')
temp <- str_replace(data$county, 'St. Louis City', 'St. Louis city')
temp <- str_replace(data$county, 'Lake Of The Woods', 'Lake of the Woods')
temp <- str_replace(data$county, 'Isle Of Wight ', 'Isle of Wight ')
temp <- str_replace(data$county, 'Lewis And Clark', 'Lewis and Clark')
temp <- str_replace(data$county, 'Fond Du Lac', 'Fond du Lac')
temp <- str_replace(data$county, 'And', 'and')
temp <- str_replace(data$county, 'Of', 'of')
temp <- str_replace(data$county, 'The', 'the')
data$county <- temp
data$fips <- fips
str(data)
unique(data$county)
length(unique(data$county))
length(unique(data$county))
county_choropleth(df_pop_county)
str(df_pop_county)
str(sub)
names(sub) <- c('region', 'value')
str(sub)
sub$region <- as.integer(sub$region)
str(sub)
county_choropleth(sub)
library(tidyverse)
library(usmap)
library(ggplot2)
library(rerddap)
library(maps)
columns <- c('district', 'fin_sub', 'chargeable_fin_number', 'po_name',
'unit_name', 'property_address', 'county', 'city', 'state', 'zip',
'property_state', 'ownership', 'fdb_id', 'ams_locale',
'fdb_facility_type', 'fdb_facility_subtype',
'building_ownership_description', 'land+description',
'space_certified_indicator', 'building_occurrence_date',
'area_sq_ft')
data_directory <- '/Users/amandeeprathee/work/corona-visualization/v2/data/'
csv_names <- list.files(data_directory)
setwd(data_directory)
data <- read_csv("ak.csv", col_names=columns, skip=4)
for (csv_file in csv_names[2:length(csv_names)]) {
new_data <- read_csv(csv_file, col_names=columns, skip=4)
data <- rbind(data, new_data)
}
str(data)
head(data)
write.csv(data, file="./data.csv", quote = FALSE, row.names = FALSE, col.names = TRUE)
library(tidyverse)
library(usmap)
library(ggplot2)
library(rerddap)
columns <- c('district', 'fin_sub', 'chargeable_fin_number', 'po_name',
'unit_name', 'property_address', 'county', 'city', 'state', 'zip',
'property_state', 'ownership', 'fdb_id', 'ams_locale',
'fdb_facility_type', 'fdb_facility_subtype',
'building_ownership_description', 'land+description',
'space_certified_indicator', 'building_occurrence_date',
'area_sq_ft')
data_directory <- '/Users/amandeeprathee/work/corona-visualization/v2/data/'
csv_names <- list.files(data_directory)
setwd(data_directory)
data <- read_csv("ak.csv", col_names=columns, skip=4)
for (csv_file in csv_names[2:length(csv_names)]) {
new_data <- read_csv(csv_file, col_names=columns, skip=4)
data <- rbind(data, new_data)
}
str(data)
columns <- c('district', 'fin_sub', 'chargeable_fin_number', 'po_name',
'unit_name', 'property_address', 'county', 'city', 'state', 'zip',
'property_state', 'ownership', 'fdb_id', 'ams_locale',
'fdb_facility_type', 'fdb_facility_subtype',
'building_ownership_description', 'land+description',
'space_certified_indicator', 'building_occurrence_date',
'area_sq_ft')
data_directory <- '/Users/amandeeprathee/work/corona-visualization/v2/data/'
csv_names <- list.files(data_directory)
setwd(data_directory)
data <- read_csv("ak.csv", col_names=columns, skip=4)
for (csv_file in csv_names[2:length(csv_names)]) {
new_data <- read_csv(csv_file, col_names=columns, skip=4)
data <- rbind(data, new_data)
}
str(data)
write.csv(data, file="./data.csv", quote = FALSE, row.names = FALSE, col.names = TRUE)
write.csv(data, file="./data.csv", quote = FALSE, row.names = FALSE)
columns <- c('district', 'fin_sub', 'chargeable_fin_number', 'po_name',
'unit_name', 'property_address', 'county', 'city', 'state', 'zip',
'property_state', 'ownership', 'fdb_id', 'ams_locale',
'fdb_facility_type', 'fdb_facility_subtype',
'building_ownership_description', 'land+description',
'space_certified_indicator', 'building_occurrence_date',
'area_sq_ft')
data_directory <- '/Users/amandeeprathee/work/corona-visualization/v2/data/'
csv_names <- list.files(data_directory)
setwd(data_directory)
data <- read_csv("ak.csv", col_names=columns, skip=4)
for (csv_file in csv_names[2:length(csv_names)]) {
new_data <- read_csv(csv_file, col_names=columns, skip=4)
data <- rbind(data, new_data)
}
str(data)
write.csv(data, file="./data.csv", quote = FALSE, row.names = FALSE)
load("post_offices.Rda")
load("./post_offices.Rda")
getwd()
load("../post_offices.Rda")
write.csv(num_post_offices, file = 'num_post_offices.csv', quote = FALSE, row.names = FALSE)
str(num_post_offices)
